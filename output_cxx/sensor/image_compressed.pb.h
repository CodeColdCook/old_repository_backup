// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor/image_compressed.proto

#ifndef PROTOBUF_sensor_2fimage_5fcompressed_2eproto__INCLUDED
#define PROTOBUF_sensor_2fimage_5fcompressed_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/header.pb.h"
// @@protoc_insertion_point(includes)

namespace SensorMsg {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_sensor_2fimage_5fcompressed_2eproto();
void protobuf_AssignDesc_sensor_2fimage_5fcompressed_2eproto();
void protobuf_ShutdownFile_sensor_2fimage_5fcompressed_2eproto();

class ImageCompressed;

// ===================================================================

class ImageCompressed : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SensorMsg.ImageCompressed) */ {
 public:
  ImageCompressed();
  virtual ~ImageCompressed();

  ImageCompressed(const ImageCompressed& from);

  inline ImageCompressed& operator=(const ImageCompressed& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageCompressed& default_instance();

  void Swap(ImageCompressed* other);

  // implements Message ----------------------------------------------

  inline ImageCompressed* New() const { return New(NULL); }

  ImageCompressed* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageCompressed& from);
  void MergeFrom(const ImageCompressed& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImageCompressed* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CommonMsg.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::CommonMsg::Header& header() const;
  ::CommonMsg::Header* mutable_header();
  ::CommonMsg::Header* release_header();
  void set_allocated_header(::CommonMsg::Header* header);

  // optional int32 size = 2;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // optional string compress_type = 3;
  void clear_compress_type();
  static const int kCompressTypeFieldNumber = 3;
  const ::std::string& compress_type() const;
  void set_compress_type(const ::std::string& value);
  void set_compress_type(const char* value);
  void set_compress_type(const char* value, size_t size);
  ::std::string* mutable_compress_type();
  ::std::string* release_compress_type();
  void set_allocated_compress_type(::std::string* compress_type);

  // optional bytes image_data = 4;
  void clear_image_data();
  static const int kImageDataFieldNumber = 4;
  const ::std::string& image_data() const;
  void set_image_data(const ::std::string& value);
  void set_image_data(const char* value);
  void set_image_data(const void* value, size_t size);
  ::std::string* mutable_image_data();
  ::std::string* release_image_data();
  void set_allocated_image_data(::std::string* image_data);

  // @@protoc_insertion_point(class_scope:SensorMsg.ImageCompressed)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::CommonMsg::Header* header_;
  ::google::protobuf::internal::ArenaStringPtr compress_type_;
  ::google::protobuf::internal::ArenaStringPtr image_data_;
  ::google::protobuf::int32 size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_sensor_2fimage_5fcompressed_2eproto();
  friend void protobuf_AssignDesc_sensor_2fimage_5fcompressed_2eproto();
  friend void protobuf_ShutdownFile_sensor_2fimage_5fcompressed_2eproto();

  void InitAsDefaultInstance();
  static ImageCompressed* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageCompressed

// optional .CommonMsg.Header header = 1;
inline bool ImageCompressed::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
inline void ImageCompressed::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::CommonMsg::Header& ImageCompressed::header() const {
  // @@protoc_insertion_point(field_get:SensorMsg.ImageCompressed.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::CommonMsg::Header* ImageCompressed::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::CommonMsg::Header;
  }
  // @@protoc_insertion_point(field_mutable:SensorMsg.ImageCompressed.header)
  return header_;
}
inline ::CommonMsg::Header* ImageCompressed::release_header() {
  // @@protoc_insertion_point(field_release:SensorMsg.ImageCompressed.header)
  
  ::CommonMsg::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void ImageCompressed::set_allocated_header(::CommonMsg::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SensorMsg.ImageCompressed.header)
}

// optional int32 size = 2;
inline void ImageCompressed::clear_size() {
  size_ = 0;
}
inline ::google::protobuf::int32 ImageCompressed::size() const {
  // @@protoc_insertion_point(field_get:SensorMsg.ImageCompressed.size)
  return size_;
}
inline void ImageCompressed::set_size(::google::protobuf::int32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:SensorMsg.ImageCompressed.size)
}

// optional string compress_type = 3;
inline void ImageCompressed::clear_compress_type() {
  compress_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageCompressed::compress_type() const {
  // @@protoc_insertion_point(field_get:SensorMsg.ImageCompressed.compress_type)
  return compress_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageCompressed::set_compress_type(const ::std::string& value) {
  
  compress_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SensorMsg.ImageCompressed.compress_type)
}
inline void ImageCompressed::set_compress_type(const char* value) {
  
  compress_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SensorMsg.ImageCompressed.compress_type)
}
inline void ImageCompressed::set_compress_type(const char* value, size_t size) {
  
  compress_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SensorMsg.ImageCompressed.compress_type)
}
inline ::std::string* ImageCompressed::mutable_compress_type() {
  
  // @@protoc_insertion_point(field_mutable:SensorMsg.ImageCompressed.compress_type)
  return compress_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageCompressed::release_compress_type() {
  // @@protoc_insertion_point(field_release:SensorMsg.ImageCompressed.compress_type)
  
  return compress_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageCompressed::set_allocated_compress_type(::std::string* compress_type) {
  if (compress_type != NULL) {
    
  } else {
    
  }
  compress_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), compress_type);
  // @@protoc_insertion_point(field_set_allocated:SensorMsg.ImageCompressed.compress_type)
}

// optional bytes image_data = 4;
inline void ImageCompressed::clear_image_data() {
  image_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageCompressed::image_data() const {
  // @@protoc_insertion_point(field_get:SensorMsg.ImageCompressed.image_data)
  return image_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageCompressed::set_image_data(const ::std::string& value) {
  
  image_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SensorMsg.ImageCompressed.image_data)
}
inline void ImageCompressed::set_image_data(const char* value) {
  
  image_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SensorMsg.ImageCompressed.image_data)
}
inline void ImageCompressed::set_image_data(const void* value, size_t size) {
  
  image_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SensorMsg.ImageCompressed.image_data)
}
inline ::std::string* ImageCompressed::mutable_image_data() {
  
  // @@protoc_insertion_point(field_mutable:SensorMsg.ImageCompressed.image_data)
  return image_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageCompressed::release_image_data() {
  // @@protoc_insertion_point(field_release:SensorMsg.ImageCompressed.image_data)
  
  return image_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageCompressed::set_allocated_image_data(::std::string* image_data) {
  if (image_data != NULL) {
    
  } else {
    
  }
  image_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_data);
  // @@protoc_insertion_point(field_set_allocated:SensorMsg.ImageCompressed.image_data)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace SensorMsg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sensor_2fimage_5fcompressed_2eproto__INCLUDED
