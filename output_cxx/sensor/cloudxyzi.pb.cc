// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor/cloudxyzi.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sensor/cloudxyzi.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SensorMsg {

namespace {

const ::google::protobuf::Descriptor* PointXYZI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointXYZI_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointCloudXYZI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointCloudXYZI_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_sensor_2fcloudxyzi_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_sensor_2fcloudxyzi_2eproto() {
  protobuf_AddDesc_sensor_2fcloudxyzi_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sensor/cloudxyzi.proto");
  GOOGLE_CHECK(file != NULL);
  PointXYZI_descriptor_ = file->message_type(0);
  static const int PointXYZI_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointXYZI, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointXYZI, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointXYZI, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointXYZI, intensity_),
  };
  PointXYZI_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PointXYZI_descriptor_,
      PointXYZI::default_instance_,
      PointXYZI_offsets_,
      -1,
      -1,
      -1,
      sizeof(PointXYZI),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointXYZI, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointXYZI, _is_default_instance_));
  PointCloudXYZI_descriptor_ = file->message_type(1);
  static const int PointCloudXYZI_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloudXYZI, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloudXYZI, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloudXYZI, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloudXYZI, is_dense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloudXYZI, points_),
  };
  PointCloudXYZI_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PointCloudXYZI_descriptor_,
      PointCloudXYZI::default_instance_,
      PointCloudXYZI_offsets_,
      -1,
      -1,
      -1,
      sizeof(PointCloudXYZI),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloudXYZI, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloudXYZI, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sensor_2fcloudxyzi_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PointXYZI_descriptor_, &PointXYZI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PointCloudXYZI_descriptor_, &PointCloudXYZI::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sensor_2fcloudxyzi_2eproto() {
  delete PointXYZI::default_instance_;
  delete PointXYZI_reflection_;
  delete PointCloudXYZI::default_instance_;
  delete PointCloudXYZI_reflection_;
}

void protobuf_AddDesc_sensor_2fcloudxyzi_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_sensor_2fcloudxyzi_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CommonMsg::protobuf_AddDesc_common_2fheader_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026sensor/cloudxyzi.proto\022\tSensorMsg\032\023com"
    "mon/header.proto\"\?\n\tPointXYZI\022\t\n\001x\030\001 \001(\002"
    "\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\021\n\tintensity\030\004 \001("
    "\r\"\212\001\n\016PointCloudXYZI\022!\n\006header\030\001 \001(\0132\021.C"
    "ommonMsg.Header\022\r\n\005width\030\002 \001(\005\022\016\n\006height"
    "\030\003 \001(\005\022\020\n\010is_dense\030\004 \001(\010\022$\n\006points\030\005 \003(\013"
    "2\024.SensorMsg.PointXYZIb\006proto3", 270);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sensor/cloudxyzi.proto", &protobuf_RegisterTypes);
  PointXYZI::default_instance_ = new PointXYZI();
  PointCloudXYZI::default_instance_ = new PointCloudXYZI();
  PointXYZI::default_instance_->InitAsDefaultInstance();
  PointCloudXYZI::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sensor_2fcloudxyzi_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sensor_2fcloudxyzi_2eproto {
  StaticDescriptorInitializer_sensor_2fcloudxyzi_2eproto() {
    protobuf_AddDesc_sensor_2fcloudxyzi_2eproto();
  }
} static_descriptor_initializer_sensor_2fcloudxyzi_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointXYZI::kXFieldNumber;
const int PointXYZI::kYFieldNumber;
const int PointXYZI::kZFieldNumber;
const int PointXYZI::kIntensityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointXYZI::PointXYZI()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SensorMsg.PointXYZI)
}

void PointXYZI::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PointXYZI::PointXYZI(const PointXYZI& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SensorMsg.PointXYZI)
}

void PointXYZI::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  intensity_ = 0u;
}

PointXYZI::~PointXYZI() {
  // @@protoc_insertion_point(destructor:SensorMsg.PointXYZI)
  SharedDtor();
}

void PointXYZI::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointXYZI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointXYZI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointXYZI_descriptor_;
}

const PointXYZI& PointXYZI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensor_2fcloudxyzi_2eproto();
  return *default_instance_;
}

PointXYZI* PointXYZI::default_instance_ = NULL;

PointXYZI* PointXYZI::New(::google::protobuf::Arena* arena) const {
  PointXYZI* n = new PointXYZI;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PointXYZI::Clear() {
// @@protoc_insertion_point(message_clear_start:SensorMsg.PointXYZI)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PointXYZI, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PointXYZI*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, intensity_);

#undef ZR_HELPER_
#undef ZR_

}

bool PointXYZI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SensorMsg.PointXYZI)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_intensity;
        break;
      }

      // optional uint32 intensity = 4;
      case 4: {
        if (tag == 32) {
         parse_intensity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intensity_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SensorMsg.PointXYZI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SensorMsg.PointXYZI)
  return false;
#undef DO_
}

void PointXYZI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SensorMsg.PointXYZI)
  // optional float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // optional uint32 intensity = 4;
  if (this->intensity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->intensity(), output);
  }

  // @@protoc_insertion_point(serialize_end:SensorMsg.PointXYZI)
}

::google::protobuf::uint8* PointXYZI::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SensorMsg.PointXYZI)
  // optional float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // optional uint32 intensity = 4;
  if (this->intensity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->intensity(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SensorMsg.PointXYZI)
  return target;
}

int PointXYZI::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SensorMsg.PointXYZI)
  int total_size = 0;

  // optional float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // optional float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // optional float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  // optional uint32 intensity = 4;
  if (this->intensity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->intensity());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointXYZI::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SensorMsg.PointXYZI)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PointXYZI* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PointXYZI>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SensorMsg.PointXYZI)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SensorMsg.PointXYZI)
    MergeFrom(*source);
  }
}

void PointXYZI::MergeFrom(const PointXYZI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SensorMsg.PointXYZI)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.intensity() != 0) {
    set_intensity(from.intensity());
  }
}

void PointXYZI::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SensorMsg.PointXYZI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointXYZI::CopyFrom(const PointXYZI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SensorMsg.PointXYZI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointXYZI::IsInitialized() const {

  return true;
}

void PointXYZI::Swap(PointXYZI* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointXYZI::InternalSwap(PointXYZI* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(intensity_, other->intensity_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PointXYZI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointXYZI_descriptor_;
  metadata.reflection = PointXYZI_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PointXYZI

// optional float x = 1;
void PointXYZI::clear_x() {
  x_ = 0;
}
 float PointXYZI::x() const {
  // @@protoc_insertion_point(field_get:SensorMsg.PointXYZI.x)
  return x_;
}
 void PointXYZI::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:SensorMsg.PointXYZI.x)
}

// optional float y = 2;
void PointXYZI::clear_y() {
  y_ = 0;
}
 float PointXYZI::y() const {
  // @@protoc_insertion_point(field_get:SensorMsg.PointXYZI.y)
  return y_;
}
 void PointXYZI::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:SensorMsg.PointXYZI.y)
}

// optional float z = 3;
void PointXYZI::clear_z() {
  z_ = 0;
}
 float PointXYZI::z() const {
  // @@protoc_insertion_point(field_get:SensorMsg.PointXYZI.z)
  return z_;
}
 void PointXYZI::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:SensorMsg.PointXYZI.z)
}

// optional uint32 intensity = 4;
void PointXYZI::clear_intensity() {
  intensity_ = 0u;
}
 ::google::protobuf::uint32 PointXYZI::intensity() const {
  // @@protoc_insertion_point(field_get:SensorMsg.PointXYZI.intensity)
  return intensity_;
}
 void PointXYZI::set_intensity(::google::protobuf::uint32 value) {
  
  intensity_ = value;
  // @@protoc_insertion_point(field_set:SensorMsg.PointXYZI.intensity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointCloudXYZI::kHeaderFieldNumber;
const int PointCloudXYZI::kWidthFieldNumber;
const int PointCloudXYZI::kHeightFieldNumber;
const int PointCloudXYZI::kIsDenseFieldNumber;
const int PointCloudXYZI::kPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointCloudXYZI::PointCloudXYZI()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SensorMsg.PointCloudXYZI)
}

void PointCloudXYZI::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::CommonMsg::Header*>(&::CommonMsg::Header::default_instance());
}

PointCloudXYZI::PointCloudXYZI(const PointCloudXYZI& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SensorMsg.PointCloudXYZI)
}

void PointCloudXYZI::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  header_ = NULL;
  width_ = 0;
  height_ = 0;
  is_dense_ = false;
}

PointCloudXYZI::~PointCloudXYZI() {
  // @@protoc_insertion_point(destructor:SensorMsg.PointCloudXYZI)
  SharedDtor();
}

void PointCloudXYZI::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void PointCloudXYZI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointCloudXYZI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointCloudXYZI_descriptor_;
}

const PointCloudXYZI& PointCloudXYZI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sensor_2fcloudxyzi_2eproto();
  return *default_instance_;
}

PointCloudXYZI* PointCloudXYZI::default_instance_ = NULL;

PointCloudXYZI* PointCloudXYZI::New(::google::protobuf::Arena* arena) const {
  PointCloudXYZI* n = new PointCloudXYZI;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PointCloudXYZI::Clear() {
// @@protoc_insertion_point(message_clear_start:SensorMsg.PointCloudXYZI)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PointCloudXYZI, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PointCloudXYZI*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(width_, height_);
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  is_dense_ = false;

#undef ZR_HELPER_
#undef ZR_

  points_.Clear();
}

bool PointCloudXYZI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SensorMsg.PointCloudXYZI)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CommonMsg.Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }

      // optional int32 width = 2;
      case 2: {
        if (tag == 16) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // optional int32 height = 3;
      case 3: {
        if (tag == 24) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_dense;
        break;
      }

      // optional bool is_dense = 4;
      case 4: {
        if (tag == 32) {
         parse_is_dense:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dense_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_points;
        break;
      }

      // repeated .SensorMsg.PointXYZI points = 5;
      case 5: {
        if (tag == 42) {
         parse_points:
          DO_(input->IncrementRecursionDepth());
         parse_loop_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_points;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SensorMsg.PointCloudXYZI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SensorMsg.PointCloudXYZI)
  return false;
#undef DO_
}

void PointCloudXYZI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SensorMsg.PointCloudXYZI)
  // optional .CommonMsg.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional int32 width = 2;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // optional int32 height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // optional bool is_dense = 4;
  if (this->is_dense() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_dense(), output);
  }

  // repeated .SensorMsg.PointXYZI points = 5;
  for (unsigned int i = 0, n = this->points_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->points(i), output);
  }

  // @@protoc_insertion_point(serialize_end:SensorMsg.PointCloudXYZI)
}

::google::protobuf::uint8* PointCloudXYZI::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SensorMsg.PointCloudXYZI)
  // optional .CommonMsg.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional int32 width = 2;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // optional int32 height = 3;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  // optional bool is_dense = 4;
  if (this->is_dense() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_dense(), target);
  }

  // repeated .SensorMsg.PointXYZI points = 5;
  for (unsigned int i = 0, n = this->points_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->points(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:SensorMsg.PointCloudXYZI)
  return target;
}

int PointCloudXYZI::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SensorMsg.PointCloudXYZI)
  int total_size = 0;

  // optional .CommonMsg.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional int32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // optional int32 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // optional bool is_dense = 4;
  if (this->is_dense() != 0) {
    total_size += 1 + 1;
  }

  // repeated .SensorMsg.PointXYZI points = 5;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointCloudXYZI::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SensorMsg.PointCloudXYZI)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PointCloudXYZI* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PointCloudXYZI>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SensorMsg.PointCloudXYZI)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SensorMsg.PointCloudXYZI)
    MergeFrom(*source);
  }
}

void PointCloudXYZI::MergeFrom(const PointCloudXYZI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SensorMsg.PointCloudXYZI)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  points_.MergeFrom(from.points_);
  if (from.has_header()) {
    mutable_header()->::CommonMsg::Header::MergeFrom(from.header());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.is_dense() != 0) {
    set_is_dense(from.is_dense());
  }
}

void PointCloudXYZI::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SensorMsg.PointCloudXYZI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointCloudXYZI::CopyFrom(const PointCloudXYZI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SensorMsg.PointCloudXYZI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointCloudXYZI::IsInitialized() const {

  return true;
}

void PointCloudXYZI::Swap(PointCloudXYZI* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointCloudXYZI::InternalSwap(PointCloudXYZI* other) {
  std::swap(header_, other->header_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(is_dense_, other->is_dense_);
  points_.UnsafeArenaSwap(&other->points_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PointCloudXYZI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointCloudXYZI_descriptor_;
  metadata.reflection = PointCloudXYZI_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PointCloudXYZI

// optional .CommonMsg.Header header = 1;
bool PointCloudXYZI::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void PointCloudXYZI::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::CommonMsg::Header& PointCloudXYZI::header() const {
  // @@protoc_insertion_point(field_get:SensorMsg.PointCloudXYZI.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::CommonMsg::Header* PointCloudXYZI::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::CommonMsg::Header;
  }
  // @@protoc_insertion_point(field_mutable:SensorMsg.PointCloudXYZI.header)
  return header_;
}
::CommonMsg::Header* PointCloudXYZI::release_header() {
  // @@protoc_insertion_point(field_release:SensorMsg.PointCloudXYZI.header)
  
  ::CommonMsg::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void PointCloudXYZI::set_allocated_header(::CommonMsg::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:SensorMsg.PointCloudXYZI.header)
}

// optional int32 width = 2;
void PointCloudXYZI::clear_width() {
  width_ = 0;
}
 ::google::protobuf::int32 PointCloudXYZI::width() const {
  // @@protoc_insertion_point(field_get:SensorMsg.PointCloudXYZI.width)
  return width_;
}
 void PointCloudXYZI::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:SensorMsg.PointCloudXYZI.width)
}

// optional int32 height = 3;
void PointCloudXYZI::clear_height() {
  height_ = 0;
}
 ::google::protobuf::int32 PointCloudXYZI::height() const {
  // @@protoc_insertion_point(field_get:SensorMsg.PointCloudXYZI.height)
  return height_;
}
 void PointCloudXYZI::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:SensorMsg.PointCloudXYZI.height)
}

// optional bool is_dense = 4;
void PointCloudXYZI::clear_is_dense() {
  is_dense_ = false;
}
 bool PointCloudXYZI::is_dense() const {
  // @@protoc_insertion_point(field_get:SensorMsg.PointCloudXYZI.is_dense)
  return is_dense_;
}
 void PointCloudXYZI::set_is_dense(bool value) {
  
  is_dense_ = value;
  // @@protoc_insertion_point(field_set:SensorMsg.PointCloudXYZI.is_dense)
}

// repeated .SensorMsg.PointXYZI points = 5;
int PointCloudXYZI::points_size() const {
  return points_.size();
}
void PointCloudXYZI::clear_points() {
  points_.Clear();
}
const ::SensorMsg::PointXYZI& PointCloudXYZI::points(int index) const {
  // @@protoc_insertion_point(field_get:SensorMsg.PointCloudXYZI.points)
  return points_.Get(index);
}
::SensorMsg::PointXYZI* PointCloudXYZI::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:SensorMsg.PointCloudXYZI.points)
  return points_.Mutable(index);
}
::SensorMsg::PointXYZI* PointCloudXYZI::add_points() {
  // @@protoc_insertion_point(field_add:SensorMsg.PointCloudXYZI.points)
  return points_.Add();
}
::google::protobuf::RepeatedPtrField< ::SensorMsg::PointXYZI >*
PointCloudXYZI::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:SensorMsg.PointCloudXYZI.points)
  return &points_;
}
const ::google::protobuf::RepeatedPtrField< ::SensorMsg::PointXYZI >&
PointCloudXYZI::points() const {
  // @@protoc_insertion_point(field_list:SensorMsg.PointCloudXYZI.points)
  return points_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace SensorMsg

// @@protoc_insertion_point(global_scope)
